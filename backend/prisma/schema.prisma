generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clasificacion {
  id       Int        @id @default(autoincrement())
  nombre   String     @unique @db.VarChar(255)
  producto producto[]
}

model producto {
  id                Int                @id @default(autoincrement())
  nombre            String             @db.VarChar(50)
  descripcion       String
  precio            Decimal            @db.Decimal(10, 2)
  imagen            String?            @db.VarChar(255)
  idclasificacion   Int                @map("idclasificacion")
  carrito_productos carrito_producto[]
  pedido_productos  pedido_producto[]
  clasificacion     clasificacion      @relation(fields: [idclasificacion], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_producto_clasificacion")
}

model rol {
  id      Int       @id
  nombre  String    @unique @db.VarChar(255)
  usuario usuario[]
}

model usuario {
  id         Int      @id @default(autoincrement())
  direccion  String?  @db.VarChar(255)
  apellido   String   @db.VarChar(100)
  nombre     String   @db.VarChar(100)
  email      String   @unique @db.VarChar(100)
  contrasena String   @db.VarChar(255)
  rolid      Int
  validado   Boolean  @default(false)
  pedidos    pedido[]
  rol        rol      @relation(fields: [rolid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol_usuario")
}

model carrito {
  id        Int                @id @default(autoincrement())
  usuarioid Int
  productos carrito_producto[]
}

model carrito_producto {
  id         Int      @id @default(autoincrement())
  cantidad   Int
  carritoid  Int
  productoid Int
  carrito    carrito  @relation(fields: [carritoid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_carrito_carrito_producto")
  producto   producto @relation(fields: [productoid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_producto_carrito_producto")
}

model pedido {
  id               Int               @id @default(autoincrement())
  usuarioid        Int
  fecha            DateTime?         @default(now()) @db.Timestamp(6)
  estado           String            @default("pendiente") @db.VarChar(50)
  total            Decimal           @db.Decimal(10, 2)
  usuario          usuario           @relation(fields: [usuarioid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pedido_usuario")
  pedido_productos pedido_producto[]
}

model pedido_producto {
  id             Int      @id @default(autoincrement())
  cantidad       Int
  preciounitario Decimal  @db.Decimal(10, 2)
  pedidoid       Int
  productoid     Int
  pedido         pedido   @relation(fields: [pedidoid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pedido_pedido_producto")
  producto       producto @relation(fields: [productoid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_producto_pedido_producto")
}
